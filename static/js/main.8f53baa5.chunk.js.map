{"version":3,"sources":["lib/fetchPlants.js","Message.js","AddPlantForm.js","Calendar.js","App.js","serviceWorker.js","index.js"],"names":["plants","require","Message","waterToday","date","toWater","plant","data-testid","key","className","length","Typography","variant","component","slice","map","AddPlantForm","toggleAddingPlant","useState","days","setDays","name","setName","error","toggleError","htmlFor","type","onChange","e","x","target","value","id","onClick","daysNum","parseInt","Number","isInteger","newPlantName","push","water_after","addPlant","Calendar","Date","changeDate","setWaterToday","addingPlant","dateStr","toString","useEffect","plantsArr","selectedDate","console","log","selectedSeconds","getTime","diffTime","Math","abs","diffDays","floor","dayOfWk","getDay","daysPassed","isWeekend","i","waterAfter","split","splice","join","plantName","waterAfterNum","getPlants","DatePicker","autoOk","color","orientation","openTo","theme","createMuiTheme","palette","primary","green","secondary","lightGreen","App","utils","DateFnsUtils","href","rel","Boolean","window","location","hostname","match","main","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f53baa5.chunk.js","sourcesContent":["const plants = require('./plants.json');\n\nexport function addPlant (newPlantName, days) {\n    // takes in name, water after x days, appends a keyvalue pair to the plants array\n    plants.push({name: newPlantName, water_after: days})\n}\n\nexport function getPlants(selectedDate) {\n    //takes in a date, and returns the plant(s) that need to be watered on the given day. \n    console.log(plants);\n    const endTime = 1583816340000;\n    let waterToday = [];\n    const selectedSeconds = selectedDate.getTime();\n    const diffTime = Math.abs(endTime - selectedSeconds);\n    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n    const dayOfWk = selectedDate.getDay();\n    const daysPassed = 84 - diffDays;\n    const isWeekend = (dayOfWk === 0 || dayOfWk === 6) ? true : false;\n    \n    /// loop through the plants to get water after days, then evaluate: \n    for (let i = 0; i <= plants.length - 1; i++) {\n        let waterAfter = plants[i].water_after.split(\"\").splice(0, 2).join(\"\");\n        let plantName = plants[i].name\n        let waterAfterNum = Number(waterAfter);\n\n        if (daysPassed % waterAfterNum === 0 && dayOfWk === 1) {\n            waterToday.push(plantName);\n        } else if ((dayOfWk === 3 || dayOfWk === 5 || dayOfWk === 1) && waterAfterNum === 2) {\n            waterToday.push(plantName);\n        } else if ((dayOfWk === 4 || dayOfWk === 1) && waterAfterNum === 3) {\n            waterToday.push(plantName);\n        } else if ((dayOfWk === 1) && (daysPassed % waterAfterNum === 1) && waterAfterNum !== 2 && waterAfterNum !== 3) {\n            //catches plants that were supposed to be watered on sunday\n            waterToday.push(plantName);\n        } else if (daysPassed % waterAfterNum === 0 && (waterAfterNum !== 2 && waterAfterNum !== 3) && !(Number.isInteger(waterAfterNum / 7)) && !isWeekend) {\n            //ensures plants added to original array get watered on correct days, while excluding original plants. \n            waterToday.push(plantName);\n        } else if ((dayOfWk === 5) && (daysPassed % waterAfterNum === waterAfterNum - 1) && waterAfterNum !== 2 && waterAfterNum !== 3) {\n            //catches plants that were supposed to be watered on saturday.\n            waterToday.push(plantName);\n        }\n    }\n    return waterToday;\n}\n","import React from \"react\";\nimport Typography from '@material-ui/core/Typography';\n\nconst Message = ({ waterToday, date }) => {\n    function toWater(plant) {\n        return (<li data-testid=\"plant-name\" key={plant}>{plant}</li>)\n    }\n\n    function checkPlants() {\n      if (waterToday.length === 0) {\n        return (\n          <Typography variant=\"h5\" component=\"h1\" className=\"no-watering\">No plants need watering today!<br></br> Enjoy some you time.</Typography>\n        )\n      } else {\n        return (\n          <Typography variant=\"h5\" component=\"h1\">\n            <strong>To water on {date.slice(0, 10)}</strong>\n            <ol>\n              {waterToday.map(toWater)}\n            </ol>\n          </Typography>\n        )\n      }\n    }\n\n    return (\n      <div className=\"message\">\n        {checkPlants()}\n      </div>\n  );\n};\n\nexport default Message;\n","import React, { useState } from 'react';\nimport { addPlant } from './lib/fetchPlants';\nimport Typography from '@material-ui/core/Typography';\n\nfunction AddPlantForm ({ toggleAddingPlant }) {\n\tconst [days, setDays] = useState();\n\tconst [name, setName] = useState();\n\tconst [error, toggleError] = useState(false);\n\n\tfunction handleSubmit() {\n\t\tconst daysNum = parseInt(days);\n\t\tif (!(Number.isInteger(daysNum))) {\n\t\t\ttoggleError(true);\n\t\t} else if (name === '' || name=== ' ') {\n\t\t\ttoggleError(true);\n\t\t} else {\n\t\t\taddPlant(name, days);\n\t\t\tsetName('');\n\t\t\tsetDays('');\n\t\t\ttoggleError(false);\n\t\t\ttoggleAddingPlant(true);\n\t\t}\n}\n\n\tfunction handleNameChange(x) {\n\t\tsetName(x);\n\t}\n\t\n\tfunction handleDaysChange(x) {\n\t\tsetDays(x);\n\t}\n\n\tfunction displayError() {\n\t\treturn (\n\t\t\t<p className=\"error\">Please enter plant name and a number of days</p>\n\t\t)\n\t}\n\n\treturn (\n\t\t<div className=\"add-plant-form\">\n\t\t\t<Typography variant=\"h5\" component=\"h1\"><strong>Add Plant</strong></Typography>\n\t\t\t<div>\n\t\t\t\t<label htmlFor=\"name-input\">\n\t\t\t\t\tPlant Name\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<input type=\"text\" onChange={e => handleNameChange(e.target.value)} value={name || ''} id=\"name-input\" />\n\t\t\t\t</label>\n\t\t\t\t<br></br>\n\t\t\t\t<label htmlFor=\"days-input\">\n\t\t\t\t\tWatering Frequency (Days)\n\t\t\t\t\t<br></br>\n\t\t\t\t\t<input type=\"text\" onChange={e => handleDaysChange(e.target.value)} value={days || ''} id=\"days-input\" />\n\t\t\t\t</label>\n\t\t\t\t<br></br>\n\t\t\t\t{error ? displayError() : null}\n\t\t\t</div>\n\t\t\t<button className=\"submit-btn\" type=\"button\" onClick={handleSubmit}>Submit</button>\n\t\t</div>\n\t);\n}\n\nexport default AddPlantForm;\n","import React, { useState, useEffect } from \"react\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport './App.css';\nimport { getPlants } from './lib/fetchPlants';\nimport Message from './Message.js';\nimport AddPlantForm from './AddPlantForm'\n\nconst Calendar = () => {\n  const [date, changeDate] = useState(new Date());\n  const [waterToday, setWaterToday] = useState([]);\n  const [addingPlant, toggleAddingPlant] = useState(false);\n  const dateStr = date.toString();\n\n  useEffect(() => {\n    const plantsArr = getPlants(date);\n    setWaterToday(plantsArr);\n    toggleAddingPlant(false);\n  }, [addingPlant, date])\n\n  return (\n    <div className=\"calendar-container\">\n      <div>\n        <AddPlantForm toggleAddingPlant={toggleAddingPlant}/>\n      </div>\n      <div className=\"date-picker-container\">\n        <DatePicker\n          autoOk\n          color=\"secondary\"\n          orientation=\"portrait\"\n          variant=\"static\"\n          openTo=\"date\"\n          value={date}\n          onChange={changeDate}\n          data-testid=\"date-picker\"\n        />\n      </div>\n      <div>\n        {waterToday && dateStr ? <Message waterToday={waterToday} date={dateStr}/> : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;","import React from 'react';\nimport './App.css';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Calendar from './Calendar';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\nimport lightGreen from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: green,\n    secondary: lightGreen,\n  },\n});\n\n\nfunction App() {\n  //const [date, changeDate] = useState(new Date());\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <div className=\"App\">\n        <div className=\"heading\">\n          <Typography variant=\"h2\" component=\"h1\">Growing In Tandem</Typography>\n          <Typography variant=\"h6\" component=\"h1\" className=\"sub-heading\">\n            <i>Lush office greenery is <a href=\"https://www.exeter.ac.uk/news/featurednews/title_409094_en.html\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"study-link\">proven</a> to \n               promote happiness and productivity amongst workers. Inspire personal growth by watering\n               the plants on a regular basis!\n            </i>\n            <hr></hr>\n          </Typography>\n        </div>\n        <div>\n          <Calendar theme={theme} />\n        </div>\n      </div>\n    </ MuiPickersUtilsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport green from '@material-ui/core/colors/green'\n\nconst theme = createMuiTheme({\n    palette: {\n        primary: green,\n        secondary: {\n            main: green[300],\n        }\n    },\n})\n\nReactDOM.render(\n    <MuiThemeProvider theme={theme}>\n        <App />\n    </MuiThemeProvider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}