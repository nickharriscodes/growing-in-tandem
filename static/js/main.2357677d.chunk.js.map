{"version":3,"sources":["Message.js","AddPlantForm.js","Calendar.js","App.js","serviceWorker.js","index.js"],"names":["Message","waterToday","date","toWater","plant","data-testid","key","className","length","Typography","variant","component","slice","map","AddPlantForm","toggleAddingPlant","useState","days","setDays","name","setName","error","toggleError","addPlant","plantName","daysToWaterAfter","fetch","method","headers","body","JSON","stringify","then","response","json","item","Array","isArray","console","log","catch","err","htmlFor","type","onChange","e","x","target","value","id","onClick","daysNum","parseInt","Number","isInteger","Calendar","allPlants","addingPlant","Date","changeDate","setWaterToday","dateStr","toString","selectedSeconds","getTime","diffTime","Math","abs","diffDays","floor","dayOfWk","getDay","daysPassed","isWeekend","useEffect","plantList","i","waterAfter","waterAfterNum","push","filterPlantsList","DatePicker","autoOk","color","orientation","openTo","theme","createMuiTheme","palette","primary","green","secondary","lightGreen","App","setAllPlants","hitApi","items","utils","DateFnsUtils","href","rel","Boolean","window","location","hostname","match","main","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2357677d.chunk.js","sourcesContent":["import React from \"react\";\nimport Typography from '@material-ui/core/Typography';\n\nconst Message = ({ waterToday, date }) => {\n    \n  function toWater(plant) {\n        return (<li data-testid=\"plant-name\" key={plant}>{plant}</li>)\n    }\n\n    function checkPlants() {\n      if (waterToday.length === 0) {\n        return (\n          <Typography variant=\"h5\" component=\"h1\" className=\"no-watering\">No plants need watering today!<br></br> Enjoy some you time.</Typography>\n        )\n      } else {\n        return (\n          <Typography variant=\"h5\" component=\"h1\">\n            <strong>To water on {date.slice(0, 10)}</strong>\n            <ol>\n              {waterToday.map(toWater)}\n            </ol>\n          </Typography>\n        )\n      }\n    }\n\n    return (\n      <div className=\"message\">\n        {checkPlants()}\n      </div>\n  );\n};\n\nexport default Message;\n","import React, { useState } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\nfunction AddPlantForm ({ toggleAddingPlant }) {\n\tconst [days, setDays] = useState();\n\tconst [name, setName] = useState();\n\tconst [error, toggleError] = useState(false);\n\n\tconst addPlant = (plantName, daysToWaterAfter) => {\n    fetch('https://calm-cliffs-46733.herokuapp.com/plants', {\n      method: 'post',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: plantName,\n        days: daysToWaterAfter\n      })\n    })\n      .then(response => response.json())\n      .then(item => {\n        if(Array.isArray(item)) {\n          console.log(item)\n        } else {\n          console.log('failure')\n        }\n\t\t\t})\n      .catch(err => console.log(err))\n  }\n\n\tfunction handleSubmit() {\n\t\tconst daysNum = parseInt(days);\n\t\tif (!(Number.isInteger(daysNum))) {\n\t\t\ttoggleError(true);\n\t\t} else if (name === '' || name=== ' ') {\n\t\t\ttoggleError(true);\n\t\t} else {\n\t\t\taddPlant(name, days);\n\t\t\tsetName('');\n\t\t\tsetDays('');\n\t\t\ttoggleError(false);\n\t\t\ttoggleAddingPlant(true);\n\t\t}\n}\n\n\tfunction handleNameChange(x) {\n\t\tsetName(x);\n\t}\n\t\n\tfunction handleDaysChange(x) {\n\t\tsetDays(x);\n\t}\n\n\tfunction displayError() {\n\t\treturn (\n\t\t\t<p className=\"error\">Please enter plant name and a number of days</p>\n\t\t)\n\t}\n\n\treturn (\n\t\t<div className=\"add-plant-form\">\n\t\t\t<Typography variant=\"h5\" component=\"h1\"><strong>Add Plant</strong></Typography>\n\t\t\t<div>\n\t\t\t\t<div className=\"plant-name\">\n\t\t\t\t\t<label htmlFor=\"name-input\" >\n\t\t\t\t\t\tPlant Name\n\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t<input type=\"text\" onChange={e => handleNameChange(e.target.value)} value={name || ''} id=\"name-input\" />\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t\t<br></br>\n\t\t\t\t<div className=\"watering-freq\">\n\t\t\t\t\t<label htmlFor=\"days-input\" >\n\t\t\t\t\t\tWatering Frequency (Days)\n\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t<input type=\"text\" onChange={e => handleDaysChange(e.target.value)} value={days || ''} id=\"days-input\" />\n\t\t\t\t\t</label>\n\t\t\t\t</div>\n\t\t\t\t<br></br>\n\t\t\t\t{error ? displayError() : null}\n\t\t\t</div>\n\t\t\t<button className=\"submit-btn\" type=\"button\" onClick={handleSubmit}>Submit</button>\n\t\t</div>\n\t);\n}\n\nexport default AddPlantForm;\n","import React, { useState, useEffect } from \"react\";\nimport { DatePicker } from \"@material-ui/pickers\";\nimport './App.css';\n// import { getPlants } from './lib/fetchPlants';\nimport Message from './Message.js';\nimport AddPlantForm from './AddPlantForm'\n\nconst Calendar = ({ allPlants, toggleAddingPlant, addingPlant }) => {\n  const [date, changeDate] = useState(new Date());\n  const [waterToday, setWaterToday] = useState([]);\n  const dateStr = date.toString();\n  \n  // variables used in sorting algorithim \n  const endTime = 1583816340000;\n  const selectedSeconds = date.getTime();\n  const diffTime = Math.abs(endTime - selectedSeconds);\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  const dayOfWk = date.getDay();\n  const daysPassed = 84 - diffDays;\n  const isWeekend = (dayOfWk === 0 || dayOfWk === 6) ? true : false;\n\n  const filterPlantsList = (plantList) => {\n    let toWater = [];\n    for (let i = 0; i <= plantList.length - 1; i++) {\n      let waterAfter = plantList[i].days\n      let plantName = plantList[i].name\n      let waterAfterNum = Number(waterAfter);\n\n      if (daysPassed % waterAfterNum === 0 && dayOfWk === 1) {\n          toWater.push(plantName);\n      } else if ((dayOfWk === 3 || dayOfWk === 5 || dayOfWk === 1) && waterAfterNum === 2) {\n          toWater.push(plantName);\n      } else if ((dayOfWk === 4 || dayOfWk === 1) && waterAfterNum === 3) {\n          toWater.push(plantName);\n      } else if ((dayOfWk === 1) && (daysPassed % waterAfterNum === 1) && waterAfterNum !== 2 && waterAfterNum !== 3) {\n          //catches plants that were supposed to be watered on sunday\n          toWater.push(plantName);\n      } else if (daysPassed % waterAfterNum === 0 && (waterAfterNum !== 2 && waterAfterNum !== 3) && !(Number.isInteger(waterAfterNum / 7)) && !isWeekend) {\n          //ensures plants added to original array get watered on correct days, while excluding original plants. \n          toWater.push(plantName);\n      } else if ((dayOfWk === 5) && (daysPassed % waterAfterNum === waterAfterNum - 1) && waterAfterNum !== 2 && waterAfterNum !== 3) {\n          //catches plants that were supposed to be watered on saturday.\n          toWater.push(plantName);\n      }\n    }\n    console.log(toWater)\n    setWaterToday(toWater);\n  }\n\n  useEffect(() => {\n    filterPlantsList(allPlants);\n    toggleAddingPlant(false);\n  }, [date, allPlants, addingPlant])\n\n  return (\n    <div className=\"calendar-container\">\n      <div>\n        <AddPlantForm toggleAddingPlant={toggleAddingPlant} />\n      </div>\n      <div className=\"date-picker-container\">\n        <DatePicker\n          autoOk\n          color=\"secondary\"\n          orientation=\"portrait\"\n          variant=\"static\"\n          openTo=\"date\"\n          value={date}\n          onChange={changeDate}\n          data-testid=\"date-picker\"\n        />\n      </div>\n      <div>\n        {waterToday && dateStr ? <Message waterToday={waterToday} date={dateStr}/> : null}\n      </div>\n    </div>\n  );\n};\n\nexport default Calendar;\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport Calendar from './Calendar';\nimport Typography from '@material-ui/core/Typography';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport green from '@material-ui/core/colors/green';\nimport lightGreen from '@material-ui/core/colors/green';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: green,\n    secondary: lightGreen,\n  },\n});\n\nfunction App() {\n  const [allPlants, setAllPlants] = useState([]);\n  const [addingPlant, toggleAddingPlant] = useState(false);\n  \n  const hitApi = () => {\n    fetch('https://calm-cliffs-46733.herokuapp.com/plants')\n        .then(response => response.json())\n        .then(items => { setAllPlants(items) })\n        .then(console.log(\"api has been hit\", allPlants))\n        .catch(err => console.log(err))\n  }\n\n  useEffect(() => {\n    hitApi();\n    toggleAddingPlant(false);\n  }, [addingPlant])\n\n  return (\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\n      <div className=\"App\">\n        <div className=\"heading\">\n          <Typography variant=\"h2\" component=\"h1\">Growing In Tandem</Typography>\n          <Typography variant=\"h6\" component=\"h1\" className=\"sub-heading\">\n            <i>Lush office greenery is <a href=\"https://www.exeter.ac.uk/news/featurednews/title_409094_en.html\" target=\"_blank\" rel=\"noopener noreferrer\" className=\"study-link\">proven</a> to \n               promote happiness and productivity amongst workers. Inspire personal growth by watering\n               the plants on a regular basis!\n            </i>\n            <hr></hr>\n          </Typography>\n        </div>\n        <div>\n          <Calendar theme={theme} allPlants={allPlants} hitApi={hitApi} toggleAddingPlant={toggleAddingPlant} addingPlant={addingPlant}/>\n        </div>\n      </div>\n    </ MuiPickersUtilsProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core';\nimport green from '@material-ui/core/colors/green'\n\nconst theme = createMuiTheme({\n\tpalette: {\n\t\tprimary: green,\n\t\tsecondary: {\n\t\t\tmain: green[300],\n\t\t}\n\t},\n})\n\nReactDOM.render(\n\t<MuiThemeProvider theme={theme}>\n\t\t<App />\n\t</MuiThemeProvider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}